{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/../strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/../events/events.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/../sdp-transform/lib/index.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/../lodash.clonedeep/index.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/../webpack/buildin/global.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/../sdp/sdp.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/../process/browser.js","webpack://JitsiMeetJS/../lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/../webpack/buildin/module.js","webpack://JitsiMeetJS/../sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/../bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/../async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/../rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/Worker.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/QualityController.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/../webpack/buildin/amd-options.js","webpack://JitsiMeetJS/../current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/../timers-browserify/main.js","webpack://JitsiMeetJS/../setimmediate/setImmediate.js","webpack://JitsiMeetJS/../sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","BrowserCapabilities","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","dispose","size","emit","callStats","values","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","config","keepPts","rtcpFb","AUDIO","PRESENTER","VIDEO","usesAdapter","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevices","availableDevicesPollTimer","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafari","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","chromeMediaSourceId","bandwidth","firefox_fake_device","fake","screen","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","label","RTCUtils","Listenable","super","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","getTrackID","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","_newGetUserMediaWithConstraints","umDevices","_newGetDesktopMedia","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","obtainAudioAndVideoPermissions","devices","includes","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingSources","gumOptions","trackOptions","newObtainAudioAndVideoPermissions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","getTracks","applyConstraints","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","autoGainControl","noiseSuppression","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","isDeviceChangeAvailable","deviceType","mediaStream","release","url","revokeObjectURL","isDesktopSharingEnabled","setAudioOutputDevice","getAudioOutputDevice","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","rtcUtils","origAttachMediaStream","apply","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","_newCreateLocalTracks","mediaStreamMetaData","metaData","getSettings","safeCounterIncrement","JitsiLocalTrack","rtcId","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_senderVideoConstraints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","destroy","_channelOpenListener","tracksInfo","newTracks","trackInfo","localTrack","createLocalTracks","initializeBridgeChannel","wsUrl","BridgeChannel","_senderVideoConstraintsChanged","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","senderVideoConstraints","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setReceiverVideoConstraint","maxFrameHeight","isOpen","selectEndpoints","ids","pinEndpoint","eventType","createPeerConnection","signaling","iceConfig","isP2P","getPCConstraints","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","supportsSdpSemantics","sdpSemantics","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLastN","getSenderVideoConstraints","getLocalVideoTrack","localVideo","getLocalTracks","getLocalAudioTrack","localAudio","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","removeLocalTrack","pos","removeRemoteTracks","owner","removedTracks","pcRemovedTracks","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","getName","isOpera","isIExplorer","isNWJS","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","jitsiLocalStorage","storage","localStorage","keyName","keyValue","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","each","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","__","parameter","hdrExt","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","once","emitter","eventListener","errorListener","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","removeEventListener","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","_callStatsUserName","_machineId","_p8","username","UsernameGenerator","generateUsername","generateCallStatsUserName","jitsiMeetId","generateJitsiMeetId","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","getConnectionPluginDefinition","base","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","enableLipSync","rayo","supportsInsertableStreams","testing","disableE2EE","isPingSupported","_pingSupported","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","useStunTurn","p2p","getStunAndTurnCredentials","_resetState","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","f","fr","endsWith","JitsiConnectionEvents","_onPrivateMessage","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","attaching","anonymousdomain","hosts","configDomain","hostname","createRoom","roomName","onCreateResource","roomjid","customDomain","muc","mucNickname","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","MucConnectionPlugin","JingleConnectionPlugin","PingConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","argsTag","funcTag","genTag","mapTag","setTag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Uint8Array","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","getTag","isFunc","buffer","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","arrayBuffer","newValue","getMapData","getValue","cache","pairs","LARGE_ARRAY_SIZE","other","ArrayBuffer","ctorString","isLength","baseKeys","CONN_STATUS_CHANGED","_options","_resumeRetryN","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","_deferredIQs","_status","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","Events","_clearDeferredIQs","deferred","closeWebsocket","_resumeTimeout","streamManagement","getResumeToken","intervalWithJitter","fetch","timeLeft","sendIQ2","sendBeacon","resumeToken","retryTimeout","getJitterDelay","ENVIRONMENT","gumFunction","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","JitsiMeetScreenObtainer","openDesktopPicker","streamType","onGetStreamResponse","errorCallback","getDisplayMedia","applyConstraintsPromise","videoTrack","g","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","remoteDescription","usesUnifiedPlan","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","enableLayerSuspension","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","getRemoteRecvMaxFrameHeight","idealHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","replaceTransport","jingleOfferElem","originalOffer","clone","remove","newFingerprint","sendTransportAccept","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","offerIq","remoteSdp","removeSsrcInfo","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","isVideoTrack","clearRecvonlySsrc","shouldRenegotiate","newLocalSDP","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","doesVideoMuteByStreamRemove","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","finishCallback","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","binding","cwd","chdir","dir","umask","objectTag","typedArrayTags","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","isArg","isBuff","isType","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","othLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","isMasked","arrLength","seen","arrValue","othIndex","resIndex","arrayFilter","baseUnary","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","getFeatures","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_notifyVersionChanged","_identities","_features","oldVersion","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","active","supportsReceiverStats","getMSID","trackId","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","AudioContextImpl","E2E_RTT_CHANGED","SIM_LAYER_RIDS","TPCUtils","videoBitrates","simulcastEncodings","high","low","scaleResolutionDownBy","standard","simulcastStreamConstraints","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","_getStreamEncodings","isSimulcastOn","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","setSimulcastStreamConstraints","encoding","transceiverInit","sendEncodings","addTransceiver","getTransceivers","addStream","setEncodings","sender","stopped","localSSRCs","_addedStreams","_extractPrimarySSRC","getParameters","encodings","setParameters","transceivers","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","crypto","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","_setEffectInProgress","effect","isEnabled","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","enabled","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","_onByteSentStatsReceived","bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","_trackMuteChanged","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","children","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","isDevicePermissionGranted","supported","promises","results","every","permissionStatus","isMultipleAudioInputSupported","emitEvent","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","download","Blob","href","click","getRecordingResults","getFileType","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","getLogs","metadata","time","ua","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","e2eping","E2ePing","setupRTCListeners","qualityController","QualityController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_delayedIceFailed","cancel","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","_getMediaSessions","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","setVideoMute","addAsUnmutePromises","removeAsMutePromises","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","pinParticipant","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","setAffiliation","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","nick","statsID","botType","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","supportsP2P","errorMsg","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_e2eEncryption","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","bridgeChannelType","openBridgeChannel","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","prop","overallFeedback","detailedFeedback","remoteUserId","getLocalSSRC","getSSRC","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","isEqual","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","meetingId","isE2EESupported","_initializeE2EEncryption","E2EEncryption","setE2EEKey","setKey","isLobbySupported","getLobby","isMembersOnly","membersOnlyEnabled","enableLobby","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","setParticipantPropertyListener","recorderSession","logObject","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","RTCRtpReceiver","supportsRTTStatistics","RTCRtpTransceiver","_getChromiumBasedVersion","RTCRtpSender","createEncodedStreams","createEncodedVideoStreams","chromium","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","audioCodec","videoBitrateDownload","videoBitrateUpload","videoCodec","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localIp","networkType","currentRoundTripTime","framerateMean","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","oldValue","isAudioMuted","_isMediaTypeMuted","_getFeaturesPromise","getBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","retry","minDelay","LastRequestTracker","_lastSuccess","xmppConnection","stropheConnection","originalRawInput","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","lobby","Lobby","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","presenceUpdateTime","customJoinPresenceExtensions","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","disableDiscoInfo","getForm","form","formSubmit","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","onParticipantLeft","skipEvents","onMucMemberLeft","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","passwordSelect","lobbyRoomNode","lobbyRoomJid","grantIQ","kickIQ","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","getMediaPresenceInfo","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","clean","onMucLeft","doReject","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","openSctp","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","opusMaxAverageBitrate","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","ConnectionPlugin","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","ack","sess","startMuted","successTime","me","iceservers","dict","credential","temp","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","end","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getPeerMediaInfo","getSSRCOwner","StropheLogger","logIncoming","logOutgoing","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","senderVideoConstraintsChanged","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","OPEN","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","videoConstraints","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","getCapabilities","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","remoteCodec","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","what","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_setVideoType","setMute","getSynchronizationSources","endpoints","endpointTrackMap","mediaTrack","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","peerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","isMediaStreamInPc","findSenderByKind","findSenderByStream","findReceiverForTrack","findSenderForTrack","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","toUnifiedPlan","videoSender","preference","degradationPreference","presenterEnabled","mungeRemoteDescription","currentDescription","newHeight","encodingsEnabledState","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","hasCameraTrack","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","oaPromise","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","modifyRtxSsrcs2","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","cachedPrimarySsrc","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","primaryCname","_transformMediaIdentifiers","pcId","streamAndTrackIDs","sessionDesc","audioMLine","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","DelayedIceFailedEvent","emitIceFailed","_emitIceFailed","_delay","_onlineListener","_maybeSetDelayTimeout","_delayTimeout","enableIceRestart","_canceled","jvbConnection","jvbConnIceState","_iceFailedTimeout","_delayedIceFailedEvent","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","_e2eeCtx","E2EEContext","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_setupSenderE2EEForTrack","handleReceiver","handleSender","kJitsiE2EE","E2EEcontext","_worker","Worker","createWorkerScript","encoder","TextEncoder","postMessage","operation","encode","receiverStreams","createEncodedAudioStreams","readableStream","writableStream","senderStreams","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_propagateSendMaxFrameHeight","mediaSession","preferredReceiveMaxFrameHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","allSettled","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","ProxyConnectionService","jitsiConnection","otherOptions","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","shimRTCPeerConnection","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","preferredMediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter","shimChrome","shimFirefox","shimEdge","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","edgeShim","safariShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 140);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport SDPUtil from '../xmpp/SDPUtil';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @param {bool}   options.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafari()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n\n        // Audio screen sharing for electron only works for screen type devices.\n        // i.e. when the user shares the whole desktop.\n        if (browser.isElectron() && options.screenShareAudio\n            && (options.desktopStream.indexOf('screen') >= 0)) {\n\n            // Provide constraints as described by the electron desktop capturer\n            // documentation here:\n            // https://www.electronjs.org/docs/api/desktop-capturer\n            constraints.audio = { mandatory: {\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\n            } };\n\n            delete constraints.video.mandatory.chromeMediaSourceId;\n        }\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isSafari()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: clonedeep(constraints.video.height.ideal) };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: clonedeep(constraints.video.width.ideal) };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // Use the standard audio constraints on non-chromium browsers.\n        if (browser.isFirefox() || browser.isSafari()) {\n            constraints.audio = {\n                deviceId: options.micDeviceId,\n                autoGainControl: !disableAGC && !disableAP,\n                echoCancellation: !disableAEC && !disableAP,\n                noiseSuppression: !disableNS && !disableAP\n            };\n        } else {\n            // NOTE(brian): the new-style ('advanced' instead of 'optional')\n            // doesn't seem to carry through the googXXX constraints\n            // Changing back to 'optional' here (even with video using\n            // the 'advanced' style) allows them to be passed through\n            // but also requires the device id to capture to be set in optional\n            // as sourceId otherwise the constraints are considered malformed.\n            if (!constraints.audio.optional) {\n                constraints.audio.optional = [];\n            }\n            constraints.audio.optional.push(\n                { sourceId: options.micDeviceId },\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints();\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     */\n    _initPCConstraints() {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\n    * enable system audio screen sharing.\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n            .then(stream => {\n                logger.log('onUserMediaSuccess');\n                updateGrantedPermissions(um, stream);\n                resolve(stream);\n            })\n            .catch(error => {\n                logger.warn('Failed to get access to local media. '\n                    + ` ${error} ${constraints} `);\n                updateGrantedPermissions(um, undefined);\n                reject(new JitsiTrackError(error, constraints, um));\n            });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return this._getAudioAndVideoStreams(options).then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: matchingDevice.deviceId\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: options.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: options.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter,\n            effects: options.effects\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /*\n         * Holds the sender video constraints signaled from the bridge.\n         */\n        this._senderVideoConstraints = {};\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(tracksInfo => {\n            if (usesNewGumFlow) {\n                return _newCreateLocalTracks(tracksInfo);\n            }\n\n            return createLocalTracks(tracksInfo, options);\n        });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter, this._senderVideoConstraintsChanged.bind(this));\n\n        this._channelOpenListener = () => {\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Notifies this instance that the sender video constraints signaled from the bridge have changed.\n     *\n     * @param {Object} senderVideoConstraints the sender video constraints from the bridge.\n     * @private\n     */\n    _senderVideoConstraintsChanged(senderVideoConstraints) {\n        this._senderVideoConstraints = senderVideoConstraints;\n        this.eventEmitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED);\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            iceConfig.encodedInsertableStreams = true;\n            iceConfig.forceEncodedAudioInsertableStreams = true; // legacy, to be removed in M85.\n            iceConfig.forceEncodedVideoInsertableStreams = true; // legacy, to be removed in M85.\n        }\n\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * @return {Object} The sender video constraints signaled from the brridge.\n     */\n    getSenderVideoConstraints() {\n        return this._senderVideoConstraints;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","/**\n * Dummy implementation of Storage interface with empty methods.\n */\nclass DummyLocalStorage {\n    /* eslint-disable no-empty-function */\n    /**\n     * Empty function\n     */\n    getItem() { }\n\n    /**\n     * Empty function\n     */\n    setItem() { }\n\n    /**\n     * Empty function\n     */\n    removeItem() { }\n\n    /**\n     * Empty function\n     */\n    key() { }\n    /* eslint-enable no-empty-function */\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends DummyLocalStorage {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n        let storage;\n\n        try {\n            storage = window.localStorage;\n        } catch (error) {\n            // do nothing\n        }\n        this.storage = storage || new DummyLocalStorage();\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this.storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName the name of the key you want to create/update.\n     * @param {string} keyValue the value you want to give the key you are\n     * creating/updating.\n     */\n    setItem(keyName, keyValue) {\n        return this.storage.setItem(keyName, keyValue);\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        return this.storage.removeItem(keyName);\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this.storage.key(i);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","/* global $ */\n\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case 'sendonly':\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case 'recvonly':\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case 'sendrecv':\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case 'inactive':\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        sdp += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        sdp += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        sdp += 'a=sendrecv\\r\\n';\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sdp += `a=ssrc:${ssrc} ${name}`;\n                    if (value && value.length) {\n                        sdp += `:${value}`;\n                    }\n                    sdp += '\\r\\n';\n                });\n        });\n\n    return sdp;\n};\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = jitsiLocalStorage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                jitsiLocalStorage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            _machineId = jitsiLocalStorage.getItem('jitsiMeetId');\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                jitsiLocalStorage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return jitsiLocalStorage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            jitsiLocalStorage.setItem('sessionId', sessionId);\n        } else {\n            jitsiLocalStorage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 6\n    },\n    '540': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n    'qhd': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport PingConnectionPlugin from './strophe.ping';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (browser.supportsInsertableStreams() && !(this.options.testing && this.options.testing.disableE2EE)) {\n            this.caps.addFeature('https://jitsi.org/meet/e2ee');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            // FIXME no need to do it again on stream resume\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n                        }\n\n                        if (identity.type === 'conference_duration') {\n                            this.conferenceDurationComponentAddress = identity.name;\n                        }\n\n                        if (identity.type === 'lobbyrooms') {\n                            this.lobbySupported = true;\n                            identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                                .then(({ features: f }) => {\n                                    f.forEach(fr => {\n                                        if (fr.endsWith('#displayname_required')) {\n                                            this.eventEmitter.emit(\n                                                JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                                        }\n                                    });\n                                })\n                                .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                        }\n                    });\n\n                    if (this.speakerStatsComponentAddress\n                        || this.conferenceDurationComponentAddress) {\n                        this.connection.addHandler(\n                            this._onPrivateMessage.bind(this), null,\n                            'message', null, null);\n                    }\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${roomName}@${options.customDomain\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('ping', new PingConnectionPlugin(this));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\n            && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        }\n\n        return true;\n    }\n}\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\nimport { getJitterDelay } from '../util/Retry';\n\nimport LastSuccessTracker from './StropheLastSuccess';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\n        };\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._lastSuccessTracker = new LastSuccessTracker();\n        this._lastSuccessTracker.startTracking(this, this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        return this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED;\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        this._stropheConn._proto && this._stropheConn._proto.socket && this._stropheConn._proto.socket.close();\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        clearTimeout(this._resumeTimeout);\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(() => {\n                const url = this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n                fetch(url).catch(\n                    error => {\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n                    })\n                    .then(() => this._maybeStartWSKeepAlive());\n            }, intervalWithJitter);\n        }\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error));\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            clearTimeout(this._resumeTimeout);\n\n            // FIXME detect internet offline\n            // The retry delay will be:\n            //   1st retry: 1.5s - 3s\n            //   2nd retry: 3s - 9s\n            //   3rd retry: 3s - 27s\n            this._resumeRetryN = Math.min(3, this._resumeRetryN + 1);\n            const retryTimeout = getJitterDelay(this._resumeRetryN, 1500, 3);\n\n            logger.info(`Will try to resume the XMPP connection in ${retryTimeout}ms`);\n\n            this._resumeTimeout = setTimeout(() => {\n                logger.info('Trying to resume the XMPP connection');\n\n                const url = new URL(this._stropheConn.service);\n                let { search } = url;\n\n                search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n\n                url.search = search;\n\n                this._stropheConn.service = url.toString();\n\n                streamManagement.resume();\n            }, retryTimeout);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nlet gumFunction = null;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {Function} gum GUM method\n     */\n    init(options = {}, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType,\n                                screenShareAudio\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true,\n            audio: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    const videoTrack = stream.getVideoTracks()[0];\n\n                    // Apply video track constraint.\n                    if (videoTrack) {\n                        applyConstraintsPromise = videoTrack.applyConstraints(options.trackOptions);\n                    }\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED)));\n    }\n};\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            screenShareAudio,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n\n            // disable simulcast for screenshare and set the max bitrate to\n            // 500Kbps if the testing flag is present in config.js.\n            if (options.testing\n                && options.testing.capScreenshareBitrate\n                && typeof options.testing.capScreenshareBitrate === 'number') {\n                pcOptions.capScreenshareBitrate\n                    = Math.random()\n                    < options.testing.capScreenshareBitrate;\n\n                // add the capScreenshareBitrate to the permanent properties so\n                // that it's included with every event that we send to the\n                // analytics backend.\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n            }\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n            if (browser.usesUnifiedPlan() && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error('onnegotiationneeded error', error);\n                        } else {\n                            logger.debug('onnegotiationneeded executed - OK');\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // SENDER_VIDEO_CONSTRAINTS_CHANGED events and notify the peer connection\n            this._removeSenderVideoConstraintsChangeListener = this.rtc.addListener(\n                RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, () => {\n                    this.eventEmitter.emit(\n                        MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n                });\n        }\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return this.options.enableLayerSuspension ? this.rtc.getSenderVideoConstraints().idealHeight : undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack, true /* isInitiator */);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the maximum bitrates on the local video track if the current\n     * session is a JVB session. Bitrate values from videoQuality settings\n     * in config.js will be used for configuring the sender.\n     * @returns {void}\n     */\n    setSenderMaxBitrates() {\n        if (this._assertNotEnded() && !this.isP2P) {\n            return this.peerconnection.setMaxBitRate();\n        }\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the degradation preference on the video sender. This setting determines if\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n     * @returns {void}\n     */\n    setSenderVideoDegradationPreference() {\n        if (this._assertNotEnded()) {\n            this.peerconnection.setSenderVideoDegradationPreference();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info('Sending SSRC update on reconnect');\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = browser.usesPlanB()\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (browser.usesPlanB()) {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            } else {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n\n                        // Change the direction to \"inactive\" only on Firefox. Audio fails on\n                        // Safari (possibly Chrome in unified plan mode) when we try to re-use inactive\n                        // m-lines due to a webkit bug.\n                        // https://bugs.webkit.org/show_bug.cgi?id=211181\n                        if (browser.isFirefox()) {\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\n                        }\n                    }\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (browser.usesPlanB()) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        },\n                        finishedCallback /* will be called with en error */);\n                    }\n\n                    promise.then(() => {\n                        if (newTrack && newTrack.isVideoTrack()) {\n                            // Set the degradation preference on the new video sender.\n                            this.peerconnection.setSenderVideoDegradationPreference();\n\n                            // Apply the cached video constraints on the new video sender.\n                            this.peerconnection.setSenderVideoConstraint();\n\n                            // Configure max bitrate on the video sender when media is routed through JVB.\n                            if (!this.isP2P) {\n                                this.peerconnection.setMaxBitRate(newTrack);\n                            }\n                        }\n                        finishedCallback();\n                    }, finishedCallback /* will be called with en error */);\n                })\n                .catch(err => {\n                    finishedCallback(err);\n                });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Apply the video constraints, max bitrates and degradation preference on\n                // the video sender if needed.\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\n                    this.setSenderMaxBitrates();\n                    this.setSenderVideoDegradationPreference();\n                    this.setSenderVideoConstraint();\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n        });\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features, identities }) => {\n                    if (user) {\n                        const sha = generateSha(\n                            Array.from(identities),\n                            Array.from(features)\n                        );\n                        const receivedNode = `${user.node}#${sha}`;\n\n                        if (receivedNode === node) {\n                            this.versionToCapabilities[receivedNode] = features;\n\n                            return features;\n                        }\n\n                        // Check once if it has been cached asynchronously.\n                        if (this.versionToCapabilities[receivedNode]) {\n                            return this.versionToCapabilities[receivedNode];\n                        }\n\n                        logger.error(`Expected node ${node} but received ${\n                            receivedNode}`);\n\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\n                    }\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        // The receiver seems to be reporting audio level immediately after the\n        // remote user has muted, so do not set the audio level on the track\n        // if it is muted.\n        if (browser.supportsReceiverStats()\n            && !this.isLocalAudioTrack()\n            && this.isWebRTCTrackMuted()) {\n            return;\n        }\n\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && audioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                audioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     * @param videoBitrates - the bitrates to be configured on the video senders when\n     * simulcast is enabled.\n     */\n    constructor(peerconnection, videoBitrates) {\n        this.pc = peerconnection;\n        this.videoBitrates = videoBitrates;\n\n        /**\n         * The simulcast encodings that will be configured on the RTCRtpSender\n         * for the video tracks in the unified plan mode.\n         */\n        this.simulcastEncodings = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: this.videoBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n\n        /**\n         * Resolution height constraints for the simulcast encodings that\n         * are configured for the video tracks.\n         */\n        this.simulcastStreamConstraints = [];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === 'audio') {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.simulcastEncodings;\n        }\n\n        return [ { active: true } ];\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where\n        // we munge SDP for turning on simulcast. Remove this check\n        // when we move to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === 'video' && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n     * Constructs resolution height constraints for the simulcast encodings that are\n     * created for a given local video track.\n     * @param {MediaStreamTrack} track - the local video track.\n     * @returns {void}\n     */\n    setSimulcastStreamConstraints(track) {\n        if (browser.isReactNative()) {\n            return;\n        }\n\n        const height = track.getSettings().height;\n\n        for (const encoding in this.simulcastEncodings) {\n            if (this.simulcastEncodings.hasOwnProperty(encoding)) {\n                this.simulcastStreamConstraints.push({\n                    height: height / this.simulcastEncodings[encoding].scaleResolutionDownBy,\n                    rid: this.simulcastEncodings[encoding].rid\n                });\n            }\n        }\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @returns {boolean} Returns true if the operation is successful,\n    * false otherwise.\n    */\n    addTrack(localTrack, isInitiator = true) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: 'sendrecv',\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n\n        // Construct the simulcast stream constraints for the newly added track.\n        if (localTrack.isVideoTrack() && localTrack.videoType === VideoType.CAMERA && this.pc.isSimulcastOn()) {\n            this.setSimulcastStreamConstraints(localTrack.getTrack());\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<boolean>} - Promise that resolves to false if unmute\n     * operation is successful, a reject otherwise.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n\n        // The assumption here is that the first transceiver of the specified\n        // media type is that of the local track.\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\n\n        // If the client starts with audio/video muted setting, the transceiver direction\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\n        if (transceiver.direction === 'recvonly') {\n            const stream = localTrack.getOriginalStream();\n\n            if (stream) {\n                this.pc.peerconnection.addStream(localTrack.getOriginalStream());\n                this.setEncodings(localTrack);\n                this.pc.localTracks.set(localTrack.rtcId, localTrack);\n                transceiver.direction = 'sendrecv';\n\n                // Construct the simulcast stream constraints for the newly added track.\n                if (localTrack.isVideoTrack()\n                    && localTrack.videoType === VideoType.CAMERA\n                    && this.pc.isSimulcastOn()) {\n                    this.setSimulcastStreamConstraints(localTrack.getTrack());\n                }\n            }\n\n            return Promise.resolve(false);\n        }\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => {\n                this.pc.localTracks.set(localTrack.rtcId, localTrack);\n\n                return Promise.resolve(false);\n            });\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<boolean>} - Promise that resolves to false if unmute\n     * operation is successful, a reject otherwise.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\n\n        return transceiver.sender.replaceTrack(null)\n            .then(() => {\n                this.pc.localTracks.delete(localTrack.rtcId);\n\n                return Promise.resolve(false);\n            });\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<false>} Promise that resolves with false as we don't want\n     * renegotiation to be triggered automatically after this operation. Renegotiation is\n     * done when the browser fires the negotiationeeded event.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n            const track = mediaType === MediaType.AUDIO\n                ? stream.getAudioTracks()[0]\n                : stream.getVideoTracks()[0];\n            const transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        this.pc._extractPrimarySSRC(ssrc));\n                });\n        } else if (oldTrack && !newTrack) {\n            if (!this.removeTrackMute(oldTrack)) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            this.pc.localTracks.delete(oldTrack.rtcId);\n            this.pc.localSSRCs.delete(oldTrack.rtcId);\n        } else if (newTrack && !oldTrack) {\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\n\n            if (!this.addTrackUnmute(newTrack)) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            newTrack.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack);\n            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n            this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n        }\n\n        return Promise.resolve(false);\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {false} - returns false always so that renegotiation is not automatically\n    * triggered after this operation.\n    */\n    setAudioTransferActive(active) {\n        return this.setMediaTransferActive('audio', active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     */\n    setEncodings(track) {\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\n        const parameters = transceiver.sender.getParameters();\n\n        parameters.encodings = this._getStreamEncodings(track);\n        transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {false} - returns false always so that renegotiation is not automatically\n     * triggered after this operation\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = Array.from(this.pc.localTracks.values())\n            .filter(track => track.getType() === mediaType);\n\n        if (active) {\n            transceivers.forEach(transceiver => {\n                if (localTracks.length) {\n                    transceiver.direction = 'sendrecv';\n                    const parameters = transceiver.sender.getParameters();\n\n                    if (parameters && parameters.encodings && parameters.encodings.length) {\n                        parameters.encodings.forEach(encoding => {\n                            encoding.active = true;\n                        });\n                        transceiver.sender.setParameters(parameters);\n                    }\n                } else {\n                    transceiver.direction = 'recvonly';\n                }\n            });\n        } else {\n            transceivers.forEach(transceiver => {\n                transceiver.direction = 'inactive';\n            });\n        }\n\n        return false;\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {false} - returns false always so that renegotiation is not automatically\n    * triggered after this operation.\n    */\n    setVideoTransferActive(active) {\n        return this.setMediaTransferActive('video', active);\n    }\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n            this.maxEnabledResolution = resolution;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n\n            // Safari returns an empty constraints object, construct the constraints using getSettings.\n            if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n                this._constraints = {\n                    height: track.getSettings().height,\n                    width: track.getSettings().width\n                };\n            }\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n            this.maxEnabledResolution = this.resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream.getTracks()[0];\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        if (browser.usesUnifiedPlan()) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return conference.replaceTrack(this, this)\n                .then(() => {\n                    this._setEffectInProgress = false;\n                })\n                .catch(error => {\n                    this._setEffectInProgress = false;\n                    this._switchStreamEffect();\n                    logger.error('Failed to switch to the new stream!', error);\n                    throw error;\n                });\n        }\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        this._switchStreamEffect();\n\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.start();\n        this._isVADEmitterRunning = true;\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.stop();\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the creator's jid of the session.\n     * @param {JitsiParticipant} participant - The creator of the session.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the jid of the participant that stopped the session.\n     * @param {JitsiParticipant} participant  - The participant's jid,\n     * that stopped the session.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    // Workaround on Safari for audio input device\n                    // selection to work. Safari doesn't support the\n                    // permissions query.\n                    if (browser.isSafari()) {\n                        resolve(true);\n\n                        return;\n                    }\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/* global __filename, $, Promise */\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport { QualityController } from './modules/qualitycontrol/QualityController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n    this._conferenceJoinAnalyticsEventSent = false;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.qualityController = new QualityController(this);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && !browser.isSafari()) {\n\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && !browser.isSafari()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\n\n        this.room.sendMessage(message, elementName, displayName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has('https://jitsi.org/meet/e2ee')) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n */\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: Boolean(this._e2eEncryption)\n        });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    const localTracks = this.getLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: Boolean(this._e2eEncryption)\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: Boolean(this._e2eEncryption)\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.qualityController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.qualityController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = true;\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    const config = this.options.config;\n\n    return browser.supportsInsertableStreams() && !(config.testing && config.testing.disableE2EE);\n};\n\n/**\n * Initializes the E2E encryption module. Currently any active media session muste be restarted due to\n * the limitation that the insertable streams constraint can only be set when a new PeerConnection instance is created.\n *\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._initializeE2EEncryption = function() {\n    this._e2eEncryption = new E2EEncryption(this, { salt: this.options.name });\n\n    // Need to re-create the peerconnections in order to apply the insertable streams constraint\n    this.p2pJingleSession && this.stopP2PSession();\n\n    const jvbJingleSession = this.jvbJingleSession;\n\n    jvbJingleSession && jvbJingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(`An error occurred while trying to terminate ${jvbJingleSession}`, error);\n        }, {\n            reason: 'success',\n            reasonDescription: 'restart required',\n            requestRestart: true,\n            sendSessionTerminate: true\n        });\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Sets the key to be used for End-To-End encryption.\n *\n * @param {string} key the key to be used.\n * @returns {void}\n */\nJitsiConference.prototype.setE2EEKey = function(key) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot set E2EE key: platform is not supported.');\n\n        return;\n    }\n\n    if (!this._e2eEncryption) {\n        this._initializeE2EEncryption();\n    }\n\n    this._e2eEncryption.setKey(key);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const participant = conference.getParticipantById(\n                    Strophe.getResourceFromJid(jid));\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, displayName);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n\n                if (conference.statistics && conference.myUserId() === id) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(\n                        conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isSafari();\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || (this.isSafari() && !this.isVersionLessThan('12.1'));\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        return true;\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafari() && typeof window.RTCRtpTransceiver !== 'undefined') {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafari()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        return Boolean(typeof window.RTCRtpSender !== 'undefined'\n            && (window.RTCRtpSender.prototype.createEncodedStreams\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams));\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            average: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDuration: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","import { browsers } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'address',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googCodecName': 'googCodecName',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafari() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels();\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats(\n                        report => {\n                            let results = null;\n\n                            if (!report || !report.result\n                                || typeof report.result !== 'function') {\n                                results = report;\n                            } else {\n                                results = report.result();\n                            }\n                            this.currentAudioLevelsReport = results;\n                            if (this._usesPromiseGetStats) {\n                                this.processNewAudioLevelReport();\n                            } else {\n                                this.processAudioLevelReport();\n                            }\n\n                            this.baselineAudioLevelsReport\n                                = this.currentAudioLevelsReport;\n                        },\n                        error => this.errorCallback(error)\n                    );\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    this.statsIntervalId = setInterval(\n        () => {\n            // Interval updates\n            this.peerconnection.getStats(\n                report => {\n                    let results = null;\n\n                    if (!report || !report.result\n                        || typeof report.result !== 'function') {\n                        // firefox\n                        results = report;\n                    } else {\n                        // chrome\n                        results = report.result();\n                    }\n\n                    this.currentStatsReport = results;\n                    try {\n                        if (this._usesPromiseGetStats) {\n                            this.processNewStatsReport();\n                        } else {\n                            this.processStatsReport();\n                        }\n                    } catch (e) {\n                        GlobalOnErrorHandler.callErrorHandler(e);\n                        logger.error(`Unsupported key:${e}`, e);\n                    }\n\n                    this.previousStatsReport = this.currentStatsReport;\n                },\n                error => this.errorCallback(error)\n            );\n        },\n        this.statsIntervalMilis\n    );\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        if (now.isRemote === true || now.remoteSource === true) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n\n        let codec;\n\n        // Try to get the codec for later reporting.\n        try {\n            codec = getStatValue(now, 'googCodecName') || '';\n        } catch (e) { /* not supported*/ }\n\n        ssrcStats.setCodec(codec);\n    }\n\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec = '';\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec = '';\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec.length && videoCodec.length) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            audioLevel = audioLevel / 32767;\n\n            if (!(ssrc in this.audioLevelReportHistory)) {\n                this.audioLevelReportHistory[ssrc] = {\n                    isLocal,\n                    data: []\n                };\n            }\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\nimport * as MediaType from './service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        if (this._getFeaturesPromise) {\n            return this._getFeaturesPromise;\n        }\n\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\n            .catch(error => {\n                // Retry on feature version mismatch\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n                }\n\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\n\n                return Promise.reject(error);\n            });\n\n        return this._getFeaturesPromise\n            .then(result => {\n                this._getFeaturesPromise = undefined;\n\n                return result;\n            }, error => {\n                this._getFeaturesPromise = undefined;\n\n                throw error;\n            });\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @param {Object} customJoinPresenceExtensions - Key values object to be used\n     * for the initial presence, they key will be an xmpp node and its text is the value,\n     * and those will be added to the initial <x xmlns='http://jabber.org/protocol/muc'/>\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, customJoinPresenceExtensions) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true, customJoinPresenceExtensions);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     * @param customJoinPresenceExtensions - Object of key values to be added to the initial presence only.\n     */\n    sendPresence(fromJoin, customJoinPresenceExtensions) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (customJoinPresenceExtensions) {\n                Object.keys(customJoinPresenceExtensions).forEach(key => {\n                    pres.c(key).t(customJoinPresenceExtensions[key]).up();\n                });\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from));\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n\n        // FIXME resend presence on CONNECTED\n        this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.removeFromPresence('nick');\n            this.lobbyRoom.addToPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid && jid === this.mainRoom.roomjid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.removeFromPresence(EMAIL_COMMAND);\n                    this.lobbyRoom.addToPresence(EMAIL_COMMAND, { value: email });\n                    this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","/* global $, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync === true\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (config.opusMaxAverageBitrate) {\n        elem.c(\n            'property', {\n                name: 'opusMaxAverageBitrate',\n                value: config.opusMaxAverageBitrate\n            }).up();\n    }\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(iceConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.urls = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.urls = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.urls += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.urls += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.urls += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                // Shuffle ICEServers for loadbalancing\n                for (let i = iceservers.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * (i + 1));\n                    const temp = iceservers[i];\n\n                    iceservers[i] = iceservers[j];\n                    iceservers[j] = temp;\n                }\n\n                if (options.useStunTurn) {\n                    let filter;\n\n                    if (options.useTurnUdp) {\n                        filter = s => s.urls.startsWith('turn');\n                    } else {\n                        // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n                        filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n                    }\n\n                    this.jvbIceConfig.iceServers = iceservers.filter(filter);\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import async from 'async';\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     * @param {function} senderVideoConstraintsChanged callback to call when the sender video constraints change.\n     */\n    constructor(peerconnection, wsUrl, emitter, senderVideoConstraintsChanged) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        this._senderVideoConstraintsChanged = senderVideoConstraintsChanged;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    this._senderVideoConstraintsChanged(videoConstraints);\n                }\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/* global __filename, RTCSessionDescription */\n\nimport { Interop } from '@jitsi/sdp-interop';\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RtxModifier from '../xmpp/RtxModifier';\nimport SDP from '../xmpp/SDP';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\nconst DESKSTOP_SHARE_RATE = 500000;\nconst HD_BITRATE = 2500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\n * stream.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n\n    // The standard video bitrates are used in Unified plan when switching\n    // between camera/desktop tracks on the same sender.\n    const standardVideoBitrates = {\n        low: LD_BITRATE,\n        standard: SD_BITRATE,\n        high: HD_BITRATE\n    };\n\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n    // These bitrates will be applied on all browsers for camera sources in simulcast mode.\n    const videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\n        ? this.options.videoQuality.maxBitratesVideo\n        : standardVideoBitrates;\n\n    this.tpcUtils = new TPCUtils(this, videoBitrates);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: browser.usesUnifiedPlan()\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender.\n     */\n    this.senderVideoMaxHeight = null;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use stream events in plan-b and track events in unified plan.\n    if (browser.usesPlanB()) {\n        this.peerconnection.onaddstream\n            = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream\n            = event => this._remoteStreamRemoved(event.stream);\n    } else {\n        this.peerconnection.ontrack = event => {\n            const stream = event.streams[0];\n\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\n            stream.onremovetrack = evt => {\n                this._remoteTrackRemoved(stream, evt.track);\n            };\n        };\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source\n * information on the RTCRtpReceivers. The information relevant to the ssrc\n * is updated each time a RTP packet constaining the ssrc is received.\n * @returns {Object} containing ssrc and audio level information as a\n * key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function() {\n    const audioLevels = {};\n    const audioReceivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = browser.usesPlanB()\n        ? new SDP(this.remoteDescription.sdp)\n        : new SDP(this.peerconnection.remoteDescription.sdp);\n    let mediaLines;\n\n    if (browser.usesUnifiedPlan()) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        if (options.startSilent) {\n            audioMedia.direction = 'inactive';\n        } else {\n            audioMedia.direction = 'sendrecv';\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the\n        // SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug('getRemoteDescription no remoteDescription found');\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n    if (browser.usesUnifiedPlan() && isInitiator) {\n        return this.tpcUtils.addTrack(track, isInitiator);\n    }\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.usesPlanB() && browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n\n    if (browser.usesUnifiedPlan() && !browser.usesSdpMungingForSimulcast()) {\n        this.tpcUtils.setEncodings(track);\n    }\n\n    // Construct the simulcast stream constraints for the newly added track.\n    if (track.isVideoTrack() && track.videoType === VideoType.CAMERA && this.isSimulcastOn()) {\n        this.tpcUtils.setSimulcastStreamConstraints(track.getTrack());\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack);\n    }\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    if (browser.usesPlanB()) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.setAudioTransferActive(active);\n    }\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sets the degradation preference on the video sender. This setting determines if\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\n * to 'maintain-resolution' when a desktop track is being shared instead.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\n    if (!this.peerconnection.getSenders) {\n        logger.debug('Browser does not support RTCRtpSender');\n\n        return;\n    }\n    const localVideoTrack = Array.from(this.localTracks.values()).find(t => t.isVideoTrack());\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters.encodings || !parameters.encodings.length) {\n        return;\n    }\n    for (const encoding in parameters.encodings) {\n        if (parameters.encodings.hasOwnProperty(encoding)) {\n            const preference = localVideoTrack.videoType === VideoType.CAMERA\n                ? DEGRADATION_PREFERENCE_CAMERA\n                : DEGRADATION_PREFERENCE_DESKTOP;\n\n            logger.info(`Setting video sender degradation preference on ${this} to ${preference}`);\n            parameters.encodings[encoding].degradationPreference = preference;\n        }\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function(localTrack = null) {\n    if (!localTrack) {\n        // eslint-disable-next-line no-param-reassign\n        localTrack = Array.from(this.localTracks.values()).find(t => t.isVideoTrack());\n\n        if (!localTrack) {\n            return;\n        }\n    }\n    const trackId = localTrack.track.id;\n    const videoType = localTrack.videoType;\n\n    // Apply the maxbitrates on the video track when one of the conditions is met.\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\n    // 2. Track is a desktop track and bitrate is capped using capScreenshareBitrate option in plan-b mode.\n    // 3. The client is running in Unified plan mode.\n    if (!((this.options.videoQuality && this.options.videoQuality.maxBitratesVideo)\n        || (browser.usesPlanB() && this.options.capScreenshareBitrate && videoType === VideoType.DESKTOP))\n        || browser.usesUnifiedPlan()) {\n        return;\n    }\n\n    if (!this.peerconnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\n\n        return;\n    }\n    const presenterEnabled = localTrack._originalStream\n        && localTrack._originalStream.id !== localTrack.getStreamId();\n\n    this.peerconnection.getSenders()\n        .filter(s => s.track && s.track.id === trackId)\n        .forEach(sender => {\n            try {\n                const parameters = sender.getParameters();\n\n                if (!parameters.encodings || !parameters.encodings.length) {\n                    return;\n                }\n                logger.debug('Setting max bitrate on video stream');\n                for (const encoding in parameters.encodings) {\n                    if (parameters.encodings.hasOwnProperty(encoding)) {\n                        // On chromium, set a max bitrate of 500 Kbps for screenshare when\n                        // capScreenshareBitrate is enabled through config.js and presenter\n                        // is not turned on.\n                        parameters.encodings[encoding].maxBitrate\n                            = browser.usesPlanB() && videoType === VideoType.DESKTOP\n                                ? presenterEnabled ? HD_BITRATE : DESKSTOP_SHARE_RATE\n\n                                // In unified plan, simulcast for SS is on by default.\n                                // When simulcast is disabled through a config.js option,\n                                // we cap the bitrate on desktop and camera tracks to 2500 Kbps.\n                                : this.isSimulcastOn()\n                                    ? this.tpcUtils.simulcastEncodings[encoding].maxBitrate\n                                    : HD_BITRATE;\n                    }\n                }\n                sender.setParameters(parameters);\n            } catch (err) {\n                logger.error('Browser does not support getParameters/setParamters '\n                    + 'or setting max bitrate on the encodings: ', err);\n            }\n        });\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    if (browser.usesPlanB()) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        if (this.options.preferH264) {\n            const parsedSdp = transform.parse(description.sdp);\n            const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n            // eslint-disable-next-line no-param-reassign\n            description = new RTCSessionDescription({\n                type: description.type,\n                sdp: transform.write(parsedSdp)\n            });\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on\n * the user preferred value. If simulcast is enabled on the peerconection, all the\n * simulcast encodings that have a resolution height lower or equal to the value\n * provided will remain active. For the non-simulcast case, video constraint is\n * applied on the track.\n * @param {number} frameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    const newHeight = frameHeight || this.senderVideoMaxHeight;\n\n    this.senderVideoMaxHeight = newHeight;\n    if (!newHeight) {\n        return Promise.resolve();\n    }\n    const localVideoTrack = Array.from(this.localTracks.values()).find(t => t.isVideoTrack());\n\n    if (!localVideoTrack || localVideoTrack.isMuted() || localVideoTrack.videoType !== VideoType.CAMERA) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.reject(new Error('RTCRtpSender not found for local video'));\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters || !parameters.encodings || !parameters.encodings.length) {\n        return Promise.reject(new Error('RTCRtpSendParameters not found for local video track'));\n    }\n    logger.info(`Setting max height of ${newHeight} on local video`);\n\n    if (this.isSimulcastOn()) {\n        // Determine the encodings that need to stay enabled based on the\n        // new frameHeight provided.\n        const encodingsEnabledState = this.tpcUtils.simulcastStreamConstraints\n            .map(constraint => constraint.height <= newHeight);\n\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = encodingsEnabledState[encoding];\n            }\n        }\n    } else {\n        parameters.encodings[0].scaleResolutionDownBy = Math.floor(localVideoTrack.resolution / newHeight);\n    }\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = newHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.setVideoTransferActive(active);\n    }\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\n/**\n * Checks if a camera track has been added to the peerconnection\n * @param {TraceablePeerConnection} peerConnection\n * @return {boolean} <tt>true</tt> if the peerconnection has\n * a camera track for its video source <tt>false</tt> otherwise.\n */\nfunction hasCameraTrack(peerConnection) {\n    return peerConnection.getLocalTracks()\n        .some(t => t.videoType === 'camera');\n}\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (browser.usesPlanB()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // configure simulcast for camera tracks always and for\n            // desktop tracks only when the testing flag for maxbitrates\n            // in config.js is disabled.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (!this.options.capScreenshareBitrate\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafari() || browser.isFirefox() || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n\n    // configure simulcast for camera tracks always and for\n    // desktop tracks only when the testing flag for maxbitrates\n    // in config.js is disabled.\n    if (this.isSimulcastOn()\n        && (!this.options.capScreenshareBitrate\n        || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { default as networkInfo, NETWORK_INFO_EVENT } from './NetworkInfo';\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling ICE event delay in combination with internet online/offline status check.\n */\nclass DelayedIceFailedEvent {\n    /**\n     * A constructor.\n     * @param {function} emitIceFailed - Will be called by this class to emit ICE failed conference event.\n     * @param {number} delay - The delay for ICE failed in milliseconds since the event occurred on the peerconnection\n     * or the internet came back online.\n     */\n    constructor(emitIceFailed, delay) {\n        this._emitIceFailed = emitIceFailed;\n        this._delay = delay;\n    }\n\n    /**\n     * Starts the event delay and internet status check logic.\n     */\n    start() {\n        this._onlineListener\n            = networkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                () => this._maybeSetDelayTimeout());\n        this._maybeSetDelayTimeout();\n    }\n\n    /**\n     * Cancels the task.\n     */\n    stop() {\n        this._onlineListener && this._onlineListener();\n        this._onlineListener = undefined;\n        clearTimeout(this._delayTimeout);\n    }\n\n    /**\n     * Resets the timer delay if the internet status is online.\n     * @private\n     */\n    _maybeSetDelayTimeout() {\n        clearTimeout(this._delayTimeout);\n\n        if (networkInfo.isOnline()) {\n            logger.info(`Will emit ICE failed in ${this._delay}ms`);\n            this._delayTimeout = setTimeout(() => this._emitIceFailed(), this._delay);\n        }\n    }\n}\n\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        if (!this._conference.options.config.enableIceRestart) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            this._delayedIceFailedEvent = new DelayedIceFailedEvent(() => {\n                this._conference.eventEmitter.emit(\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.ICE_FAILED);\n            }, 15000);\n            this._delayedIceFailedEvent.start();\n\n            return;\n        } else if (!this._conference.xmpp.isPingSupported()) {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed notification immediately');\n            this._conference.jvbJingleSession.sendIceFailedNotification();\n\n            return;\n        }\n\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                const jvbConnection = this._conference.jvbJingleSession;\n                const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n                if (!jvbConnection) {\n                    logger.warn('Not sending ICE failed - no JVB connection');\n                } else if (jvbConnIceState === 'connected') {\n                    logger.info('ICE connection restored - not sending ICE failed');\n                } else {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(`Sending ICE failed - the connection has not recovered: ${jvbConnIceState}`);\n                        this._iceFailedTimeout = undefined;\n                        jvbConnection.sendIceFailedNotification();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n        this._delayedIceFailedEvent && this._delayedIceFailedEvent.stop();\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     * @param {Object} options\n     * @param {string} options.salt - Salt to be used for key deviation. Check {@link E2EEContext} for more details.\n     */\n    constructor(conference, { salt }) {\n        this.conference = conference;\n        this._e2eeCtx = new E2EEContext({ salt });\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        //  added instead of shenanigans around conference track events and track muted.\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Sets the key to be used for End-To-End encryption.\n     *\n     * @param {string} key - the key to be used.\n     * @returns {void}\n     */\n    setKey(key) {\n        this._e2eeCtx.setKey(key);\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @returns {void}\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @returns {void}\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createWorkerScript } from './Worker';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     *\n     * @param {string} options.salt - Salt to be used for key deviation.\n     *      FIXME: We currently use the MUC room name for this which has the same lifetime\n     *      as this context. While not (pseudo)random as recommended in\n     *        https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\n     *      this is easily available and the same for all participants.\n     *      We currently do not enforce a minimum length of 16 bytes either.\n     */\n    constructor(options) {\n        this._options = options;\n\n        // Initialize the E2EE worker.\n        this._worker = new Worker(createWorkerScript(), {\n            name: 'E2EE Worker'\n        });\n        this._worker.onerror = e => logger.onerror(e);\n\n        // Initialize the salt and convert it once.\n        const encoder = new TextEncoder();\n\n        // Send initial options to worker.\n        this._worker.postMessage({\n            operation: 'initialize',\n            salt: encoder.encode(options.salt)\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        let receiverStreams;\n\n        if (receiver.createEncodedStreams) {\n            receiverStreams = receiver.createEncodedStreams();\n        } else {\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\n                : receiver.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'decode',\n            readableStream: receiverStreams.readableStream,\n            writableStream: receiverStreams.writableStream,\n            participantId\n        }, [ receiverStreams.readableStream, receiverStreams.writableStream ]);\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        let senderStreams;\n\n        if (sender.createEncodedStreams) {\n            senderStreams = sender.createEncodedStreams();\n        } else {\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\n                : sender.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'encode',\n            readableStream: senderStreams.readableStream,\n            writableStream: senderStreams.writableStream,\n            participantId\n        }, [ senderStreams.readableStream, senderStreams.writableStream ]);\n    }\n\n    /**\n     * Sets the key to be used for E2EE.\n     *\n     * @param {string} value - Value to be used as the new key. May be falsy to disable end-to-end encryption.\n     */\n    setKey(value) {\n        let key;\n\n        if (value) {\n            const encoder = new TextEncoder();\n\n            key = encoder.encode(value);\n        } else {\n            key = false;\n        }\n\n        this._worker.postMessage({\n            operation: 'setKey',\n            key\n        });\n    }\n}\n","// Worker for E2EE/Insertable streams. Currently served as an inline blob.\nconst code = `\n    // Polyfill RTCEncoded(Audio|Video)Frame.getMetadata() (not available in M83, available M84+).\n    // The polyfill can not be done on the prototype since its not exposed in workers. Instead,\n    // it is done as another transformation to keep it separate.\n    function polyFillEncodedFrameMetadata(encodedFrame, controller) {\n      if (!encodedFrame.getMetadata) {\n        encodedFrame.getMetadata = function() {\n          return {\n            // TODO: provide a more complete polyfill based on additionalData for video.\n            synchronizationSource: this.synchronizationSource,\n            contributingSources: this.contributingSources\n          };\n        };\n      }\n      controller.enqueue(encodedFrame);\n    }\n\n    // We use a ringbuffer of keys so we can change them and still decode packets that were\n    // encrypted with an old key.\n    // In the future when we dont rely on a globally shared key we will actually use it. For\n    // now set the size to 1 which means there is only a single key. This causes some\n    // glitches when changing the key but its ok.\n    const keyRingSize = 1;\n\n    // We use a 96 bit IV for AES GCM. This is signalled in plain together with the\n    // packet. See https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n    const ivLength = 12;\n\n    // We use a 128 bit key for AES GCM.\n    const keyGenParameters = {\n        name: 'AES-GCM',\n        length: 128\n    };\n\n    // We copy the first bytes of the VP8 payload unencrypted.\n    // For keyframes this is 10 bytes, for non-keyframes (delta) 3. See\n    //   https://tools.ietf.org/html/rfc6386#section-9.1\n    // This allows the bridge to continue detecting keyframes (only one byte needed in the JVB)\n    // and is also a bit easier for the VP8 decoder (i.e. it generates funny garbage pictures\n    // instead of being unable to decode).\n    // This is a bit for show and we might want to reduce to 1 unconditionally in the final version.\n    //\n    // For audio (where frame.type is not set) we do not encrypt the opus TOC byte:\n    //   https://tools.ietf.org/html/rfc6716#section-3.1\n    const unencryptedBytes = {\n        key: 10,\n        delta: 3,\n        undefined: 1 // frame.type is not set on audio\n    };\n\n    // Salt used in key derivation\n    // FIXME: We currently use the MUC room name for this which has the same lifetime\n    // as this worker. While not (pseudo)random as recommended in\n    // https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\n    // this is easily available and the same for all participants.\n    // We currently do not enforce a minimum length of 16 bytes either.\n    let keySalt;\n\n    // Raw keyBytes used to derive the key.\n    let keyBytes;\n\n    /**\n     * Derives a AES-GCM key from the input using PBKDF2\n     * The key length can be configured above and should be either 128 or 256 bits.\n     * @param {Uint8Array} keyBytes - Value to derive key from\n     * @param {Uint8Array} salt - Salt used in key derivation\n     */\n    async function deriveKey(keyBytes, salt) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n        const material = await crypto.subtle.importKey('raw', keyBytes,\n            'PBKDF2', false, [ 'deriveBits', 'deriveKey' ]);\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#PBKDF2\n        return crypto.subtle.deriveKey({\n            name: 'PBKDF2',\n            salt,\n            iterations: 100000,\n            hash: 'SHA-256'\n        }, material, keyGenParameters, false, [ 'encrypt', 'decrypt' ]);\n    }\n\n\n    /** Per-participant context holding the cryptographic keys and\n     * encode/decode functions\n     */\n    class Context {\n        /**\n         * @param {string} id - local muc resourcepart\n         */\n        constructor(id) {\n            // An array (ring) of keys that we use for sending and receiving.\n            this._cryptoKeyRing = new Array(keyRingSize);\n\n            // A pointer to the currently used key.\n            this._currentKeyIndex = -1;\n\n            // We keep track of how many frames we have sent per ssrc.\n            // Starts with a random offset similar to the RTP sequence number.\n            this._sendCounts = new Map();\n\n            this._id = id;\n        }\n\n        /**\n         * Derives a per-participant key.\n         * @param {Uint8Array} keyBytes - Value to derive key from\n         * @param {Uint8Array} salt - Salt used in key derivation\n         */\n        async deriveKey(keyBytes, salt) {\n            const encoder = new TextEncoder();\n            const idBytes = encoder.encode(this._id);\n            // Separate both parts by a null byte to avoid ambiguity attacks.\n            const participantSalt = new Uint8Array(salt.byteLength + idBytes.byteLength + 1);\n            participantSalt.set(salt);\n            participantSalt.set(idBytes, salt.byteLength + 1);\n\n            return deriveKey(keyBytes, participantSalt);\n        }\n        /**\n         * Sets a key and starts using it for encrypting.\n         * @param {CryptoKey} key\n         */\n        setKey(key) {\n            this._currentKeyIndex++;\n            this._cryptoKeyRing[this._currentKeyIndex % this._cryptoKeyRing.length] = key;\n        }\n\n        /**\n         * Construct the IV used for AES-GCM and sent (in plain) with the packet similar to\n         * https://tools.ietf.org/html/rfc7714#section-8.1\n         * It concatenates\n         * - the 32 bit synchronization source (SSRC) given on the encoded frame,\n         * - the 32 bit rtp timestamp given on the encoded frame,\n         * - a send counter that is specific to the SSRC. Starts at a random number.\n         * The send counter is essentially the pictureId but we currently have to implement this ourselves.\n         * There is no XOR with a salt. Note that this IV leaks the SSRC to the receiver but since this is\n         * randomly generated and SFUs may not rewrite this is considered acceptable.\n         * The SSRC is used to allow demultiplexing multiple streams with the same key, as described in\n         *   https://tools.ietf.org/html/rfc3711#section-4.1.1\n         * The RTP timestamp is 32 bits and advances by the codec clock rate (90khz for video, 48khz for\n         * opus audio) every second. For video it rolls over roughly every 13 hours.\n         * The send counter will advance at the frame rate (30fps for video, 50fps for 20ms opus audio)\n         * every second. It will take a long time to roll over.\n         *\n         * See also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n         */\n        makeIV(synchronizationSource, timestamp) {\n            const iv = new ArrayBuffer(ivLength);\n            const ivView = new DataView(iv);\n\n            // having to keep our own send count (similar to a picture id) is not ideal.\n            if (!this._sendCounts.has(synchronizationSource)) {\n                // Initialize with a random offset, similar to the RTP sequence number.\n                this._sendCounts.set(synchronizationSource, Math.floor(Math.random() * 0xFFFF));\n            }\n            const sendCount = this._sendCounts.get(synchronizationSource);\n\n            ivView.setUint32(0, synchronizationSource);\n            ivView.setUint32(4, timestamp);\n            ivView.setUint32(8, sendCount % 0xFFFF);\n\n            this._sendCounts.set(synchronizationSource, sendCount + 1);\n\n            return iv;\n        }\n\n        /**\n         * Function that will be injected in a stream and will encrypt the given encoded frames.\n         *\n         * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n         * @param {TransformStreamDefaultController} controller - TransportStreamController.\n         *\n         * The packet format is described below. One of the design goals was to not require\n         * changes to the SFU which for video requires not encrypting the keyframe bit of VP8\n         * as SFUs need to detect a keyframe (framemarking or the generic frame descriptor will\n         * solve this eventually). This also \"hides\" that a client is using E2EE a bit.\n         *\n         * Note that this operates on the full frame, i.e. for VP8 the data described in\n         *   https://tools.ietf.org/html/rfc6386#section-9.1\n         *\n         * The VP8 payload descriptor described in\n         *   https://tools.ietf.org/html/rfc7741#section-4.2\n         * is part of the RTP packet and not part of the frame and is not controllable by us.\n         * This is fine as the SFU keeps having access to it for routing.\n         *\n         * The encrypted frame is formed as follows:\n         * 1) Leave the first (10, 3, 1) bytes unencrypted, depending on the frame type and kind.\n         * 2) Form the GCM IV for the frame as described above.\n         * 3) Encrypt the rest of the frame using AES-GCM.\n         * 4) Allocate space for the encrypted frame.\n         * 5) Copy the unencrypted bytes to the start of the encrypted frame.\n         * 6) Append the ciphertext to the encrypted frame.\n         * 7) Append the IV.\n         * 8) Append a single byte for the key identifier. TODO: we don't need all the bits.\n         * 9) Enqueue the encrypted frame for sending.\n         */\n        encodeFunction(encodedFrame, controller) {\n            const keyIndex = this._currentKeyIndex % this._cryptoKeyRing.length;\n\n            if (this._cryptoKeyRing[keyIndex]) {\n                const iv = this.makeIV(encodedFrame.getMetadata().synchronizationSource, encodedFrame.timestamp);\n\n                return crypto.subtle.encrypt({\n                    name: 'AES-GCM',\n                    iv,\n                    additionalData: new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])\n                }, this._cryptoKeyRing[keyIndex], new Uint8Array(encodedFrame.data,\n                    unencryptedBytes[encodedFrame.type]))\n                .then(cipherText => {\n                    const newData = new ArrayBuffer(unencryptedBytes[encodedFrame.type] + cipherText.byteLength\n                        + iv.byteLength + 1);\n                    const newUint8 = new Uint8Array(newData);\n\n                    newUint8.set(\n                        new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])); // copy first bytes.\n                    newUint8.set(\n                        new Uint8Array(cipherText), unencryptedBytes[encodedFrame.type]); // add ciphertext.\n                    newUint8.set(\n                        new Uint8Array(iv), unencryptedBytes[encodedFrame.type] + cipherText.byteLength); // append IV.\n                    newUint8[unencryptedBytes[encodedFrame.type] + cipherText.byteLength + ivLength]\n                        = keyIndex; // set key index.\n\n                    encodedFrame.data = newData;\n\n                    return controller.enqueue(encodedFrame);\n                }, e => {\n                    console.error(e);\n\n                    // We are not enqueuing the frame here on purpose.\n                });\n            }\n\n            /* NOTE WELL:\n             * This will send unencrypted data (only protected by DTLS transport encryption) when no key is configured.\n             * This is ok for demo purposes but should not be done once this becomes more relied upon.\n             */\n            controller.enqueue(encodedFrame);\n        }\n\n        /**\n         * Function that will be injected in a stream and will decrypt the given encoded frames.\n         *\n         * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n         * @param {TransformStreamDefaultController} controller - TransportStreamController.\n         *\n         * The decrypted frame is formed as follows:\n         * 1) Extract the key index from the last byte of the encrypted frame.\n         *    If there is no key associated with the key index, the frame is enqueued for decoding\n         *    and these steps terminate.\n         * 2) Determine the frame type in order to look up the number of unencrypted header bytes.\n         * 2) Extract the 12-byte IV from its position near the end of the packet.\n         *    Note: the IV is treated as opaque and not reconstructed from the input.\n         * 3) Decrypt the encrypted frame content after the unencrypted bytes using AES-GCM.\n         * 4) Allocate space for the decrypted frame.\n         * 5) Copy the unencrypted bytes from the start of the encrypted frame.\n         * 6) Append the plaintext to the decrypted frame.\n         * 7) Enqueue the decrypted frame for decoding.\n         */\n        decodeFunction(encodedFrame, controller) {\n            const data = new Uint8Array(encodedFrame.data);\n            const keyIndex = data[encodedFrame.data.byteLength - 1];\n\n            if (this._cryptoKeyRing[keyIndex]) {\n                const iv = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - ivLength - 1, ivLength);\n                const cipherTextStart = unencryptedBytes[encodedFrame.type];\n                const cipherTextLength = encodedFrame.data.byteLength - (unencryptedBytes[encodedFrame.type]\n                    + ivLength + 1);\n\n                return crypto.subtle.decrypt({\n                    name: 'AES-GCM',\n                    iv,\n                    additionalData: new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])\n                }, this._cryptoKeyRing[keyIndex], new Uint8Array(encodedFrame.data, cipherTextStart, cipherTextLength))\n                .then(plainText => {\n                    const newData = new ArrayBuffer(unencryptedBytes[encodedFrame.type] + plainText.byteLength);\n                    const newUint8 = new Uint8Array(newData);\n\n                    newUint8.set(new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type]));\n                    newUint8.set(new Uint8Array(plainText), unencryptedBytes[encodedFrame.type]);\n\n                    encodedFrame.data = newData;\n\n                    return controller.enqueue(encodedFrame);\n                }, e => {\n                    console.error(e);\n\n                    // TODO: notify the application about error status.\n\n                    // TODO: For video we need a better strategy since we do not want to based any\n                    // non-error frames on a garbage keyframe.\n                    if (encodedFrame.type === undefined) { // audio, replace with silence.\n                        // audio, replace with silence.\n                        const newData = new ArrayBuffer(3);\n                        const newUint8 = new Uint8Array(newData);\n\n                        newUint8.set([ 0xd8, 0xff, 0xfe ]); // opus silence frame.\n                        encodedFrame.data = newData;\n                        controller.enqueue(encodedFrame);\n                    }\n                });\n            } else if (keyIndex >= this._cryptoKeyRing.length\n                    && this._cryptoKeyRing[this._currentKeyIndex % this._cryptoKeyRing.length]) {\n                // If we are encrypting but don't have a key for the remote drop the frame.\n                // This is a heuristic since we don't know whether a packet is encrypted,\n                // do not have a checksum and do not have signaling for whether a remote participant does\n                // encrypt or not.\n                return;\n            }\n\n            // TODO: this just passes through to the decoder. Is that ok? If we don't know the key yet\n            // we might want to buffer a bit but it is still unclear how to do that (and for how long etc).\n            controller.enqueue(encodedFrame);\n        }\n    }\n    const contexts = new Map(); // Map participant id => context\n\n    onmessage = async event => {\n        const { operation } = event.data;\n\n        if (operation === 'initialize') {\n            keySalt = event.data.salt;\n        } else if (operation === 'encode') {\n            const { readableStream, writableStream, participantId } = event.data;\n\n            if (!contexts.has(participantId)) {\n                contexts.set(participantId, new Context(participantId));\n            }\n            const context = contexts.get(participantId);\n            const transformStream = new TransformStream({\n                transform: context.encodeFunction.bind(context)\n            });\n\n            readableStream\n                .pipeThrough(new TransformStream({\n                  transform: polyFillEncodedFrameMetadata, // M83 polyfill.\n                }))\n                .pipeThrough(transformStream)\n                .pipeTo(writableStream);\n            if (keyBytes) {\n                context.setKey(await context.deriveKey(keyBytes, keySalt));\n            }\n        } else if (operation === 'decode') {\n            const { readableStream, writableStream, participantId } = event.data;\n\n            if (!contexts.has(participantId)) {\n                contexts.set(participantId, new Context(participantId));\n            }\n            const context = contexts.get(participantId);\n            const transformStream = new TransformStream({\n                transform: context.decodeFunction.bind(context)\n            });\n\n            readableStream\n                .pipeThrough(new TransformStream({\n                  transform: polyFillEncodedFrameMetadata, // M83 polyfill.\n                }))\n                .pipeThrough(transformStream)\n                .pipeTo(writableStream);\n            if (keyBytes) {\n                context.setKey(await context.deriveKey(keyBytes, keySalt));\n            }\n        } else if (operation === 'setKey') {\n            keyBytes = event.data.key;\n            contexts.forEach(async context => {\n                if (keyBytes) {\n                    context.setKey(await context.deriveKey(keyBytes, keySalt));\n                } else {\n                    context.setKey(false);\n                }\n            });\n        } else {\n            console.error('e2ee worker', operation);\n        }\n    };\n`;\n\nexport const createWorkerScript = () => URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send and receive video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class QualityController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the quality constraints.\n     */\n    constructor(conference) {\n        this.conference = conference;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n        this.preferredReceiveMaxFrameHeight\n            && mediaSession.setReceiverVideoConstraint(this.preferredReceiveMaxFrameHeight);\n\n        // Set the degradation preference on the local video track.\n        mediaSession.setSenderVideoDegradationPreference();\n\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\n        mediaSession.setSenderMaxBitrates();\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (!sendMaxFrameHeight) {\n            return Promise.resolve();\n        }\n\n        for (const session of this.conference._getMediaSessions()) {\n            promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession && activeMediaSession.getRemoteRecvMaxFrameHeight();\n\n        if (this.preferredSendMaxFrameHeight && remoteRecvMaxFrameHeight) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max receive video frame height.\n     * @param {number|undefined} maxFrameHeight - the new value.\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this.preferredReceiveMaxFrameHeight = maxFrameHeight;\n\n        for (const session of this.conference._getMediaSessions()) {\n            maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {};\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript() {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        if (!options.disableThirdPartyRequests) {\n            const appId = options.callStatsID;\n            const appSecret = options.callStatsSecret;\n            const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n            api.initialize(appId, appSecret, userId, (status, message) => {\n                if (status === 'success') {\n                    api.on(PRECALL_TEST_RESULTS, (...args) => {\n                        emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                    });\n                    _initialized = true;\n                    resolve();\n                } else {\n                    reject({\n                        status,\n                        message\n                    });\n                }\n            }, null, { disablePrecalltest: true });\n        }\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    await _loadScript();\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            if (!mLine.sources) {\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // check if there is a m-line that is inactive and is of the same media type\n                const inactiveMid = currentDesc.media\n                    .findIndex(cmLine => cmLine.direction\n                        && cmLine.direction === 'inactive'\n                        && cmLine.type === type);\n\n                if (inactiveMid > -1) {\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\n                } else {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = currentDesc.media.length.toString();\n                    newMline.direction = 'sendonly';\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    currentDesc.media.push(newMline);\n                }\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport Logger from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Make sure that we ALWAYS add the conference flag to the remote\n        // description: That flag is deprecated but, as of this writing\n        // (09/2019), it's still used in jitsi-meet to enable legacy simulcast\n        // when screen-sharing (https://cs.chromium.org/chromium/src/third_party/webrtc/media/base/media_channel.h?rcl=f2773b54647633d5725fa25dea883f99dd1b400c&l=838).\n        //\n        // We've observed the following chain of events that almost always\n        // results in connectivity issues at the receiver:\n        //\n        // 1. The user joins a call with startVideoMuted=true, so there's no\n        //    jitsi track created.\n        // 2. The user enables screen-sharing. At this point we do a\n        //    renegotiation (which starts with an sRD); the ssrcCache is empty,\n        //    so the conference flag is not added to the remote description SDP.\n        // 3. The next step of the re-negotiation is to set the answer, so\n        //    mungeLocalDescription is called, and because now we have a track\n        //    due to the user enabling screen-sharing, it enables simulcast.\n        // 4. sLD is called with simulcast ssrcs, but the sRD call of step 2\n        //    didn't add the conference flag in the SDP, so the screen-sharing\n        //    is without simulcast.\n        // 5. Any subsequent re-negotiation (for example, due to a participant\n        //    joining/leaving the call) will enable simulcast and this switch\n        //    almost always results in a broken stream at the receiver.\n        if (!self.options.usesUnifiedPlan) {\n            assertGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        cb(modifiedEvent);\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  const {navigator} = window;\n\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (navigator.mediaDevices &&\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n    result.browser = 'edge';\n    result.version = extractVersion(navigator.userAgent,\n        /Edge\\/(\\d+).(\\d+)$/, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const browserDetails = utils.detectBrowser(window);\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const addIceCandidateNullSupported =\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!addIceCandidateNullSupported && !arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions. Native support planned for Chrome M77.\n      if (browserDetails.version < 78 &&\n        arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\nexport function fixNegotiationNeeded(window) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (pc.signalingState !== 'stable') {\n      return;\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  const shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\n  };\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window) {\n  if (!('getDisplayMedia' in window.navigator)) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    window.navigator.getDisplayMedia.bind(window.navigator);\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nimport {filterIceServers} from './filtericeservers';\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (window.RTCIceGatherer) {\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\n        return args;\n      };\n    }\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\n        return args;\n      };\n    }\n    // this adds an additional event listener to MediaStrackTrack that signals\n    // when a tracks enabled property was changed. Workaround for a bug in\n    // addStream, see below. No longer required in 15025+\n    if (browserDetails.version < 15025) {\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\n          window.MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n        set(value) {\n          origMSTEnabled.set.call(this, value);\n          const ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n  }\n\n  // ORTC defines the DTMF sender a bit different.\n  // https://github.com/w3c/ortc/issues/714\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = new window.RTCDtmfSender(this);\n          } else if (this.track.kind === 'video') {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n  // Edge currently only implements the RTCDtmfSender, not the\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n    window.RTCDTMFSender = window.RTCDtmfSender;\n  }\n\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\n      browserDetails.version);\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\n    if (config && config.iceServers) {\n      config.iceServers = filterIceServers(config.iceServers,\n        browserDetails.version);\n      utils.log('ICE servers after filtering:', config.iceServers);\n    }\n    return new RTCPeerConnectionShim(config);\n  };\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\n}\n\nexport function shimReplaceTrack(window) {\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n  if (window.RTCRtpSender &&\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\n    window.RTCRtpSender.prototype.replaceTrack =\n        window.RTCRtpSender.prototype.setTrack;\n  }\n}\n","/*\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nexport function filterIceServers(iceServers, edgeVersion) {\n  let hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(server => {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n      }\n      const isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(url => {\n        // filter STUN unconditionally.\n        if (url.indexOf('stun:') === 0) {\n          return false;\n        }\n\n        const validTurn = url.startsWith('turn') &&\n            !url.startsWith('turn:[') &&\n            url.includes('transport=udp');\n        if (validTurn && !hasTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return validTurn && !hasTurn;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window) {\n  const browserDetails = utils.detectBrowser(window);\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  // as well as ignoring {sdpMid, candidate: \"\"}\n  if (browserDetails.version < 68) {\n    const nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      if (arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params)) {\n            params.encodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(\n              sender.setParameters(params)\n              .catch(() => {})\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track) {\n        const stream = arguments[1];\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (!this._localStreams.includes(stream)) {\n            this._localStreams.push(stream);\n          }\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in window.RTCPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeAllowExtmapMixed(window) {\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter = adapterFactory({window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimEdge: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n      chromeShim.shimGetStats(window);\n      chromeShim.shimSenderReceiverGetStats(window);\n      chromeShim.fixNegotiationNeeded(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n      firefoxShim.shimRemoveStream(window);\n      firefoxShim.shimSenderGetStats(window);\n      firefoxShim.shimReceiverGetStats(window);\n      firefoxShim.shimRTCDataChannel(window);\n      firefoxShim.shimAddTransceiver(window);\n      firefoxShim.shimCreateOffer(window);\n      firefoxShim.shimCreateAnswer(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimGetDisplayMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCreateOfferLegacy(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}