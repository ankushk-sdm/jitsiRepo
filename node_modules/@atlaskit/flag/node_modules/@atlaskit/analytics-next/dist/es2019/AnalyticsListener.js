import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { AnalyticsReactContext } from './AnalyticsReactContext';
const ContextTypes = {
    getAtlaskitAnalyticsEventHandlers: PropTypes.func,
};
const noop = () => [];
class AnalyticsListener extends Component {
    constructor() {
        super(...arguments);
        this.getChildContext = () => ({
            getAtlaskitAnalyticsEventHandlers: this.getAnalyticsEventHandlers,
        });
        this.getAnalyticsEventHandlers = () => {
            const { channel, onEvent } = this.props;
            const { getAtlaskitAnalyticsEventHandlers } = this.context;
            const parentEventHandlers = (typeof getAtlaskitAnalyticsEventHandlers === 'function' &&
                getAtlaskitAnalyticsEventHandlers()) ||
                [];
            const handler = (event, eventChannel) => {
                if (channel === '*' || channel === eventChannel) {
                    onEvent(event, eventChannel);
                }
            };
            return [handler, ...parentEventHandlers];
        };
    }
    render() {
        const { getAtlaskitAnalyticsContext = noop } = this.context;
        const { children } = this.props;
        return (React.createElement(AnalyticsReactContext.Provider, { value: {
                getAtlaskitAnalyticsEventHandlers: this.getAnalyticsEventHandlers,
                getAtlaskitAnalyticsContext,
            } }, children));
    }
}
AnalyticsListener.contextTypes = ContextTypes;
AnalyticsListener.childContextTypes = ContextTypes;
export default AnalyticsListener;
//# sourceMappingURL=AnalyticsListener.js.map