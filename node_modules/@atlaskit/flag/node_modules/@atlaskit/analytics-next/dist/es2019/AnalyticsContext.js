import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import { AnalyticsReactContext } from './AnalyticsReactContext';
const ContextTypes = {
    getAtlaskitAnalyticsContext: PropTypes.func,
    getAtlaskitAnalyticsEventHandlers: PropTypes.func,
};
class AnalyticsContext extends Component {
    constructor(props) {
        super(props);
        this.getChildContext = () => ({
            getAtlaskitAnalyticsContext: this.getAnalyticsContext,
        });
        this.getAnalyticsContext = () => {
            const { data } = this.props;
            const { getAtlaskitAnalyticsContext } = this.context;
            const ancestorData = (typeof getAtlaskitAnalyticsContext === 'function' &&
                getAtlaskitAnalyticsContext()) ||
                [];
            return [...ancestorData, data];
        };
        this.getAnalyticsEventHandlers = () => {
            const { getAtlaskitAnalyticsEventHandlers } = this.context;
            const ancestorHandlers = (typeof getAtlaskitAnalyticsEventHandlers === 'function' &&
                getAtlaskitAnalyticsEventHandlers()) ||
                [];
            return ancestorHandlers;
        };
        this.state = {
            getAtlaskitAnalyticsContext: this.getAnalyticsContext,
            getAtlaskitAnalyticsEventHandlers: this.getAnalyticsEventHandlers,
        };
    }
    render() {
        const { children } = this.props;
        return (React.createElement(AnalyticsReactContext.Provider, { value: this.state }, Children.only(children)));
    }
}
AnalyticsContext.contextTypes = ContextTypes;
AnalyticsContext.childContextTypes = ContextTypes;
export default AnalyticsContext;
//# sourceMappingURL=AnalyticsContext.js.map