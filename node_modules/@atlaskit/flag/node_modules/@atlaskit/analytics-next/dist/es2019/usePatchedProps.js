/**
 * Internal hook used for the `withAnalyticsHook` HOC and eventually
 * will be used to replace `AnalyticsContextConsumer`.
 */
import { useState } from 'react';
import { useAnalyticsEvents } from './useAnalyticsEvents';
export function usePatchedProps(createEventMap = {}, wrappedComponentProps) {
    const { createAnalyticsEvent } = useAnalyticsEvents();
    const mapCreateEventsToProps = (changedPropNames, props) => changedPropNames.reduce((modified, propCallbackName) => {
        const eventCreator = createEventMap[propCallbackName];
        const providedCallback = props[propCallbackName];
        if (!['object', 'function'].includes(typeof eventCreator)) {
            return modified;
        }
        const modifiedCallback = (...args) => {
            const analyticsEvent = typeof eventCreator === 'function'
                ? eventCreator(createAnalyticsEvent, props)
                : createAnalyticsEvent(eventCreator);
            if (providedCallback) {
                providedCallback(...args, analyticsEvent);
            }
        };
        return {
            ...modified,
            [propCallbackName]: modifiedCallback,
        };
    }, {});
    const [originalProps, setOriginalProps] = useState(Object.keys(createEventMap).reduce((a, c) => ({ ...a, [c]: wrappedComponentProps[c] }), {}));
    const [patchedProps, setPatchedProps] = useState(mapCreateEventsToProps(Object.keys(createEventMap), wrappedComponentProps));
    const updatePatchedEventProps = (props) => {
        const changedPropCallbacks = Object.keys(createEventMap).filter(p => originalProps[p] !== props[p]);
        if (changedPropCallbacks.length > 0) {
            setPatchedProps({
                ...patchedProps,
                ...mapCreateEventsToProps(changedPropCallbacks, props),
            });
            const updatedProps = changedPropCallbacks.reduce((a, c) => ({ ...a, [c]: props[c] }), {});
            setOriginalProps({
                ...originalProps,
                ...updatedProps,
            });
        }
        return patchedProps;
    };
    return {
        patchedEventProps: updatePatchedEventProps(wrappedComponentProps),
    };
}
//# sourceMappingURL=usePatchedProps.js.map